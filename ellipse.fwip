#    Copyright (C) 2020 by Kevin D. Woerner
# 2020-12-08 kdw  explicit module on consts
# 2020-09-30 kdw  circumference work
# 2020-09-29 kdw  more comments; third flattening
# 2020-08-11 kdw  ell[i]ptic function renam
# 2020-08-03 kdw  explicit module for pi and tau
# 2020-07-02 kdw  more tests; circ computed
# 2020-06-25 kdw  func renam
# 2020-06-15 kdw  ell[i]psem func
# 2020-06-09 kdw  ell[i]ptic func renam
# 2020-06-01 kdw  flat2ecc and ecc2flat funcs
# 2020-02-21 kdw  created

# 0 <= m == eccentricity**2 <= 1

FUNC DBL ellipsearea(DBL aa, DBL bb):
   # area of an ellipse with semi-axes AA and BB
   RETURN Kw.PI * aa * bb;
FUNC_END

FUNC DBL ellipseecc(DBL aa, DBL bb):
   # eccentricity of an ellipse with semi-axes AA and BB
   RETURN Kw.topyh1(Kw.ratio(aa, bb));
FUNC_END

FUNC DBL ellipsem(DBL aa, DBL bb):
   # m parameter of an ellipse with semi-axes AA and BB
   DBL rati;

   rati = Kw.ratio(aa, bb);
   RETURN 1.0 - rati * rati;
FUNC_END

FUNC DBL ellipseflatness(DBL aa, DBL bb):
   # first flattening of an ellipse with semi-axes AA and BB
   RETURN 1.0 - Kw.ratio(aa, bb);
FUNC_END

FUNC DBL ellipsen(DBL aa, DBL bb):
   # third flattening of an ellipse with semi-axes AA and BB
   RETURN ABS(aa - bb) / (aa + bb);
FUNC_END

FUNC DBL flat2ecc(DBL flt):
   # convert first flattening to eccentricity
   RETURN SQRT(flt * (2.0 - flt));
FUNC_END

FUNC DBL ecc2flat(DBL ecc):
   # convert eccentricity to first flattening
   RETURN 1.0 - SQRT(1.0 - ecc * ecc);
FUNC_END

FUNC DBL ellipsecir(DBL aa_orig, DBL bb_orig):
   # circumference of an ellipse with semi-axes AA and BB
   DBL aaa;
   DBL bbb;
   DBL mm;
   DBL suma;
   DBL temp;
   INT ii;
   DBL retvalu;

   IF aa_orig < bb_orig:
      aaa = bb_orig;
      bbb = aa_orig;
   ELSE:
      aaa = aa_orig;
      bbb = bb_orig;
   IF_END
   IF bbb <= SQRT(Kw.DBLEPS) * aaa:
      retvalu = 4.0 * aaa;
   ELSE:
      suma = 0.0;
      mm = 1.0;
      AWAIT Kw.iseq(aaa, bbb) COUNT ii FROM 0 TO 30:
         temp = (aaa + bbb) / 2.0;
         bbb = SQRT(aaa * bbb);
         aaa = temp;
         mm += mm;
         suma += mm * Kw.square(aaa - bbb);
      AWAIT_END

      retvalu = Kw.PI * (Kw.square(aa_orig + bb_orig) - suma)
            / (aaa + bbb);
   IF_END
   RETURN retvalu;
FUNC_END

FUNC DBL ellipsecir__1(DBL aa, DBL bb):
   # circumference of an ellipse with semi-axes AA and BB
   # via the elliptic integral of the 2th kind
   DBL major_axis;
   DBL minor_axis;
   DBL rati;

   IF aa < bb:
      major_axis = bb;
      minor_axis = aa;
   ELSE:
      major_axis = aa;
      minor_axis = bb;
   IF_END
   rati = minor_axis / major_axis;
   # now major_axis = max(AA, BB)
   RETURN 4.0 * major_axis * Kw.elliptic2m(1.0 - rati * rati);
FUNC_END

#TEST:ellipsecir(1,10)==40.639741801008957425577931011816563791;
#TEST:ellipsearea(1,10)==31.41592653589793238462643383279502884;
